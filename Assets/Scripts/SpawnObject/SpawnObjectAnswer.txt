/*
Write a script that spawns a new game object at a random location in the scene every few seconds. The new game object should have a random color and should move upwards until it reaches a certain height, at which point it should be destroyed. Additionally, the script should keep track of the player's score, which increases every time a game object is destroyed. The score should be displayed on the screen using a UI text element.
*/

using UnityEngine;
using TMPro;  // reference Text Mesh Pro

public class SpawnObject : MonoBehaviour
{

    // store the time between spawns
    public float spawnTime = 0.2f;
    // store the maximum height they can reach
    public float maxHeight = 10f; 
    // store which prefab we'll be spawning
    public GameObject prefab;
    // store a reference to the TMP text
    public TMP_Text scoreText;

    // store the score in a variable
    private int score = 0;
    
    void Start()
    {
        // If I want the resource directly from assets
        // prefab = Resources.Load<GameObject>("SpawnObject");

        // start repeatedly calling the method that will do the spawning
        // at the rate specified between spawns
        InvokeRepeating("SpawnIt", 0f, spawnTime);
    }

    void Update(){

        // update the text of the score
        scoreText.text = "Score: " + score.ToString();
    }
    
    // a method that does all the spawning
    void SpawnIt(){

        // store the position to spawn at wich will be at random range for x and z
        Vector3 spawnPosition = new Vector3(Random.Range(-5f, 5f), 0f, Random.Range(-5f, 5f));
        // instantiate the object and store a reference to it
        GameObject newObject = Instantiate(prefab, spawnPosition, Quaternion.identity);
        // store reference to the Renderer of the new object
        Renderer myRenderer = newObject.GetComponent<Renderer>();

        // make the the renderer is not null
        if (myRenderer != null)
        {
            // set the renderer material color to a new random color
            myRenderer.material.color = new Color(Random.value, Random.value, Random.value);
        }

        // add a rigidbody to the component and store a reference to it
        Rigidbody rigidbody = newObject.AddComponent<Rigidbody>();

        // add force to the rigidbody, up and using ForceMode Impulse
        rigidbody.AddForce(Vector3.up * 10f, ForceMode.Impulse);
        rb.useGravity = false;
        
        // invoke the method that increses score when maxheight is reached
        Invoke("IncreaseScore", maxHeight / 10f);
        // destroy the object when maxheight is reached
        Destroy(newObject, maxHeight / 10f);
    }

    // short method that increments the score
    public void IncreaseScore()
    {
        score++;
    }

}
